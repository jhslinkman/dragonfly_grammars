#
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.
#

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

num_args =  Key('alt:down') + Text('%(n)d') + Key('alt:up')
release = Key('shift:up,alt:up,ctrl:up')

cmd.map = {
    'cancel':    Key('escape'),
                                                          
    #### Cursor manpulation
    'up [<n>]':    Key('up:%(n)d'),
    'down [<n>]':  Key('down:%(n)d'),
    'left [<n>]':  Key('left:%(n)d'),
    'right [<n>]': Key('right:%(n)d'),

    "up par [<n>]": Key("a-up:%(n)d"),
    "down par [<n>]": Key("a-down:%(n)d"),

    "shift up par [<n>]": Key("shift:down,a-up:%(n)d,shift:up"),
    "shift down par [<n>]": Key("shift:down,a-down:%(n)d,shift:up"),

    '(page up | gope) [<n>]':  Key('pgup:%(n)d'),
    '(page down | drop) [<n>]':  Key('pgdown:%(n)d'),

    'lope [<n>]':  Key('c-left:%(n)d'),
    'yope [<n>]':  Key('c-right:%(n)d'),

    'home': Key('home'),
    'hard home': Key('home:2'),
    'doll': Key('end'),

    '(file top | doc home)': Key('c-home'),
    '(file toe | doc end)': Key('c-end'),
    
    #### Various keys
    '(space | ace) [<n>]': Key('space:%(n)d'),
    "comma": Key("comma"),  
    'act': Key('escape'),
    '(delete | chuck) [<n>]': Key('del:%(n)d'),
    '(backspace | scratch) [<n>]': Key('backspace:%(n)d'),
    '(slap) [<n>]': Key('enter:%(n)d'),
    'tab [<n>]': Key('tab:%(n)d'),

    ####
    "mark": Key("c-k,c-space"),
    "sel [to] mark": Key("c-k,c-a"),
    "del [to] mark": Key("c-k,c-w"),
    "swap [with] mark": Key("c-k,c-x"),
    "clear mark": Key("c-k,c-g"),

    'mark par': Key("ctrl:down,s-g,ctrl:up"),

    "undo [<n>]": release + Key("c-z:%(n)d"),
    "redo [<n>]": release + Key("c-y:%(n)d"),
    "paste [that]": release + Key("c-v"),
    "paste below": release + Key("end, enter, c-v"),
    "(copy | yank)": release + Key("c-c"),
    'yank line': release + Key('a-l,c-c'),
    "(cut | kill)": release + Key("c-x"),
    "select all": release + Key("c-a"),
    "[hold] shift": Key("shift:down"),
    "release shift": Key("shift:up"),
    "[hold] control": Key("ctrl:down"),
    "release control": Key("ctrl:up"),
    "release [all]": release,
    
    "(bow [<n>] )":
        Key("c-left:%(n)d"),
    "(fow [<n>] )":
        Key("c-right:%(n)d"),
    "(bump [<n>])":
        Key("shift:down,c-right:%(n)d,shift:up,c-x"),
    "(whack [<n>])":
        Key("shift:down,c-left:%(n)d,shift:up,c-x"),
    "sel ([<n>])": Key("c-d:%(n)d"),

    "(kill | del | delete) [this | whole] line":
        release + Key("c-x"),
    "(kill | del | delete) [next] [<n>] lines":
        release + Key("shift:down,down:%(n)d,end,shift:up,c-x"),
    "kill back this line":
        release + Key("ctrl:down,k:down,backspace,k:up,ctrl:up"),
    "(kill | del | delete) (back | prev | previous) [<n>] (line | lines)":
        release + Key("shift:down,up:%(n)d,home,shift:up,c-x"),
    "insert below": Key("c-enter"),
    "insert above": Key("ctrl:down,shift:down,enter,shift:up,ctrl:up"),
    "(line | sel) up": Key("ctrl:down,shift:down,up,shift:up,ctrl:up"),
	"(line | sel) down": Key("ctrl:down,shift:down,down,shift:up,ctrl:up"),
	"sel line [<n>]": Key("c-l:%(n)d"),

	"jump pair": Key("c-m"),
    "tab line": Key("c-rbracket"),
    "untab line": Key("c-lbracket"),
    "dub line [<n>]": Key("ctrl:down,s-d:%(n)d,ctrl:up"),
    "merge [up] line": Key("c-j"),
   # "merge down line": Key("c-j"),

    "spell": Mimic("spell"),
    "downcase word [<n>]": Key("c-k,c-l:%(n)d"),
    "cap word [<n>]": Key("c-k,c-u:%(n)d"),

    "whack lead [<n>]": Key("c-left:%(n)d,backspace,c-right:%(n)d"),

}


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

def format_jive(dictation):          # Function name must start with "format_".
    """  jive <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return "-".join(text.split(" "))  # Put underscores between words.

def format_dotty(dictation):          # Function name must start with "format_".
    """ Dotty <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return ".".join(text.split(" "))  # Put underscores between words.

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    text = str(dictation).lower()
    return "_".join(text.split(" ")) + "()"

# Format: SomeWords
def format_camel(dictation):
    """ camel <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ one word upper <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)

# Format: someWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])

