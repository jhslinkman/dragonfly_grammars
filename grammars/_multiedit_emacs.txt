#
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.
#

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

num_args =  Key('alt:down') + Text('%(n)d') + Key('alt:up')
release = Key('shift:up,alt:up,ctrl:up')

cmd.map = {
    'cancel':    Key('c-g'),
                                                          
    #### Cursor manpulation
    'up [<n>]':    Key('up:%(n)d'),
    'down [<n>]':  Key('down:%(n)d'),
    'left [<n>]':  Key('left:%(n)d'),
    'right [<n>]': Key('right:%(n)d'),

    '(page up | gope) [<n>]':  Key('pgup:%(n)d'),
    '(page down | drop) [<n>]':  Key('pgdown:%(n)d'),

    'lope [<n>]':  Key('a-b:%(n)d'),
    'yope [<n>]':  Key('a-f:%(n)d'),

    'home':
        Key('a-m'),
    'hard home':        Key('home'),
    'end':        Key('end'),

    '(file top | doc home)':    Key('a-langle'),
    '(file toe | doc end)':    Key('a-rangle'),

    "(cent | center) line": Key("c-l"),
    
    #### Various keys
    '(space | ace) [<n>]': num_args + Key('space'),
    'act': Key('escape'),
    '(delete | del | chuck) [<n>]': num_args + Key('del'),
    '(backspace | scratch) [<n>]': Key('backspace:%(n)d'),
    '(enter | slap) [<n>]': Key('enter:%(n)d'),
    'tab [<n>]': Key('tab:%(n)d'),

    ####
    "mark": release + Key("c-space"),
    "(go | jump) to mark": release + Key("c-u, c-space"),
    "exchange mark": release + Key("c-x,c-x"),
    "undo [<n>]": release + num_args + Key("c-x, u"),
    "redo [<n>]": release + num_args + Key("c-g, c-x, u"),
    "paste [that]": release + Key("c-y"),
    "paste over": Key("backspace, c-y"),
    "paste below": release + Key("end, enter, c-y"),
    "paste again": release + Key("a-y"),
    "duplicate <n>": release + Key("a-w, c-y:%(n)d"),
    "duplicate line [<n>] [times]":
        release + Key("c-a, c-space, c-n, a-w, c-y:%(n)d,backspace"),
    "(copy | yank)": release + Key("a-w"),
    'yank line': release + Key('c-a, c-space, c-e, a-w'),
    "(cut | kill)": release + Key("c-w"),
    "select all": release + Key("c-a"),
    "[hold] shift": Key("shift:down"),
    "release shift": Key("shift:up"),
    "[hold] control": Key("ctrl:down"),
    "release control": Key("ctrl:up"),
    "release [all]": release,
    "scratch lines": Key("c-x, c-o"),
    "scratch space": Key("a-x") + Text("just-one-space") + Key("enter"),
    
    "( (back | left) <n> (word | words) | bow [<n>] )":
        num_args + Key("a-b"),
    "( (forward |fore | right) <n> (word | words) | fow [<n>] )":
        num_args + Key("a-f"),
    "((kill | del | delete) [next] [<n> | this] (word | words) | bump [<n>])":
        release + num_args + Key("a-d"),
    "((kill | del | delete) (prev |previous |back) [<n>] (word | words) | whack [<n>])":
	    release + num_args + Key("a-backspace"),

    "(kill | del | delete) [this] line":
	    release + Key("c-k"),
    "(kill | del | delete) whole line":
	    release + Key("ctrl:down,shift:down,backspace,shift:up,ctrl:up"),
    "(kill | del | delete) [next] [<n>] lines":
	    release + num_args + Key("c-k"),
    "(kill | del | delete) (back | prev | previous) this line":
	    release + Key("a-0,c-k"),
    "(kill | del | delete) (back | prev | previous) [<n>] (line | lines)":
	    release + Key("a-minus") + num_args + Key("c-k"),

    "(up | back) [<n>] (par | paragraph | paragraphs)":
        num_args + Key("a-lbrace"),
    "(down | next) [<n>] (par | paragraph | paragraphs)":
        num_args + Key("a-rbrace"),
    "mark [<n>] (par | paragraph | paragraphs)":
        num_args + Key("a-h"),

    #### Indentation
    '(home | first) (car | character)':
        Key('a-m'),
    'indent':
        Key('a-i'),
    'indent region [<n>]':
        num_args + Key('ctrl:down,alt:down,backslash,alt:up,ctrl:up'),
    'shift region left [<n>]':
        Key('a-minus') + num_args + Key('c-x,tab'),
    'shift region right [<n>]':
        num_args + Key('c-x,tab'),
    'split line':
        Key('ctrl:down,alt:down,o,alt:up,ctrl:up'),
    'merge lines':
        Key('a-caret'),

    ## Capitalization
    '(cap | capitalize) [next] word':
        Key('a-c'),
    '(cap | capitalize) [next] <n> words':
        num_args + Key('a-c'),
    '(cap | capitalize) (back | prev | previous) <n> words':
        Key('a-minus') + num_args + Key('a-c'),

    '(no (cap | capitalize) | lowercase) [next] word':
        Key('a-l'),
    '(no (cap | capitalize) | lowercase) [next] <n> words':
        num_args + Key('a-l'),
    '(no (cap | capitalize) | lowercase) (back | prev | previous) <n> words':
        Key('a-minus') + num_args + Key('a-l'),

    'all (caps | capitalize) [next] word':
        Key('a-u'),
    'all (caps | capitalize) [next] <n> words':
        num_args + Key('a-u'),
    'all (caps | capitalize) (back | prev | previous) <n> words':
        Key('a-minus') + num_args + Key('a-u'),

    'cap region':
        Key('c-x,c-u'),
    'no cap region':
        Key('c-x,c-l'),

    #### Lines
    #    'line down [<n>]': num_args + Key(''),
    'lineup [<n>]':    num_args + Key('home:2, shift:down, end:2, shift:up, c-x, del, up, home:2, enter, up, c-v'),
    'nab [<n>]':       num_args + Key('home:2, shift:down, down, up, end:2, shift:up, c-c, end:2'),
    'plop [<n>]':      num_args + Key('c-v'),
    'squishy [<n>]':   num_args + Key('end:2, del, space'),
    'strip':           Key('s-end:2, del'),
    'striss':          Key('s-home:2, del'),
    'trance [<n>]':    num_args + Key('home:2, shift:down, down, up, end:2, shift:up, c-c, end:2, enter, c-v'),
    'wipe [<n>]':      num_args + Key('home:2, shift:down, down, up, end:2, del, shift:up, backspace'),

}


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

def format_jive(dictation):          # Function name must start with "format_".
    """  jive <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return "-".join(text.split(" "))  # Put underscores between words.

def format_dotty(dictation):          # Function name must start with "format_".
    """ Dotty <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return ".".join(text.split(" "))  # Put underscores between words.

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    text = str(dictation).lower()
    return "_".join(text.split(" ")) + "()"

# Format: SomeWords
def format_camel(dictation):
    """ camel <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ one word upper <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)

# Format: someWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])

